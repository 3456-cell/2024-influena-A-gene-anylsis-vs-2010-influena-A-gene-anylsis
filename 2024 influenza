from Bio import Entrez, SeqIO
from skbio.diversity import beta_diversity
from Bio import SeqIO
import pandas as pd
import re
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import seaborn as sns
from Bio.Align.Applications import MuscleCommandline
import subprocess
from Bio.pairwise2 import format_alignment
from Bio.Seq import Seq

import scipy.stats as stats
from scipy.stats import norm
from Bio.Align.Applications import MuscleCommandline
from collections import defaultdict
from Bio.Align import AlignInfo
from Bio import AlignIO
import os
from Bio import motifs
from Bio import SearchIO
from Bio.SeqRecord import SeqRecord
from Bio.Align import MultipleSeqAlignment,AlignInfo
from scipy.optimize import root_scalar
import pandas as pd
import skbio
from pyfaidx import Fasta
from skbio.stats.ordination import pcoa
from skbio import DNA
from skbio.sequence import DNA, Protein
from skbio.io import read, write
from skbio.stats.composition import clr
from skbio.tree import TreeNode
from skbio.diversity import beta_diversity
from skbio.alignment import global_pairwise_align_protein
from skbio.stats.distance import DistanceMatrix
from skbio.tree import nj
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from scipy.stats import zscore
from sklearn.preprocessing import StandardScaler
from Bio import Phylo
from ete3 import Tree, TreeStyle
import math
from Bio.Blast import NCBIXML


fasta_file_2024='BVBRC_genome_sequence.fasta'


def compute_gc(seq):
   
    if len(seq) == 0:
        return 0
    return (seq.count('G') + seq.count('C')) / len(seq) * 100

def parse_header(header):
    
   
    accession_match = re.match(r"accn\|(\S+)", header)
    accession = accession_match.group(1) if accession_match else ""
    
   
    virus_match = re.search(r"Influenza A virus \((.*)\) segment", header)
    virus_info = virus_match.group(1) if virus_match else ""
    
    return accession, virus_info


records = []
for record in SeqIO.parse(fasta_file_2024, 'fasta'):
    sample_id = record.id
    sequence = str(record.seq).upper()  
    accession, virus_info = parse_header(record.description)
    
    records.append({
        'sample id': sample_id,
        'accession': accession,
        'virus_info': virus_info,
        'description': record.description,
        'sequence': sequence,
        'length': len(sequence),
        'gc_content': compute_gc(sequence)
    })


df = pd.DataFrame(records) 
print(df)
counters=Counter(df['length'])
